Title: Personal Expense Tracker Web App (Flat-File, PHP, HTML, Gemini OCR)

Objective:
Build a modern, clean, single-user web application to track personal expenses grouped by trips/projects, using a wizard-style interface. The app runs on a Debian server, uses a flat-file JSON-based storage system (no SQL database), and integrates with Gemini Vision for automatic extraction of receipt data from PDFs and images. The app outputs a PDF summary report per trip.

Project Structure:
/expenses-app/
├── index.html                  # Trip browser/dashboard
├── wizard/                    # Step-by-step trip creation
│   └── index.html             # Main wizard container
├── frontend/
│   ├── trip.html              # View trip details
│   ├── edit.html              # Manual edit form
│   ├── assets/
│       ├── style.css
│       └── wizard.js
├── backend/
│   ├── upload.php             # Handles file uploads
│   ├── gemini.php             # Sends files to Gemini OCR
│   ├── save_trip.php          # Saves metadata and expense JSON
│   ├── generate_pdf.php       # Builds trip summary as PDF
│   └── load.php               # Loads data for dashboard/trip views
├── data/
│   └── trips/
│       └── {trip-name}/
│           ├── metadata.json
│           ├── expenses.json
│           ├── receipts/
│           └── report.pdf

Design Goals:
- Responsive layout (mobile-friendly)
- Simple HTML structure with minimal JS
- CSS is modular, easy to style/replace
- Modern fonts (e.g., Inter, Roboto), rounded corners, light shadows
- Animated progress bar and transitions for wizard

Wizard Flow (HTML + JavaScript frontend):
Step 1 – Create New Trip
- Trip name
- Date range
- Optional notes
- Stored in metadata.json

Step 2 – Upload Receipts
- Allow multiple uploads (PDF or image)
- Save to /data/trips/{trip-name}/receipts/
- Display thumbnails or filenames

Step 3 – Process with Gemini
- Use Gemini Vision API to extract:
  - Date
  - Merchant
  - Amount
  - (Optionally items)
- Save extracted data temporarily in session or JS state

Step 4 – Review + Edit
- Show extracted data in editable table or form
- Allow user to correct entries before saving

Step 5 – Submit
- Save all expenses to expenses.json
- Save metadata
- Generate report.pdf from data

Gemini API Integration (PHP - gemini.php):
- Accept uploaded file (image or PDF)
- Send to Gemini Vision API (use API key)
- Parse and return structured response:
  {
    "date": "2025-06-13",
    "merchant": "Walmart",
    "amount": 32.45,
    "category": "Groceries",
    "note": "",
    "source": "receipts/walmart.pdf"
  }

JSON Data Schema:
metadata.json
{
  "name": "Austin Trip 2025",
  "start_date": "2025-06-13",
  "end_date": "2025-06-16",
  "notes": "Work trip to Austin"
}

expenses.json
[
  {
    "id": "a1b2c3",
    "date": "2025-06-14",
    "amount": 44.75,
    "category": "Meals",
    "note": "Dinner at Franklin BBQ",
    "source": "receipts/dinner.pdf"
  }
]

PDF Export (generate_pdf.php):
- Read metadata and expenses
- Generate styled PDF summary:
  - Trip name and date
  - Table of expenses
  - Totals per category
- Use a PHP PDF library (e.g., mpdf or dompdf)
- Save to report.pdf in trip folder

Security / Authentication:
- None required
- Assume local trusted user access only
- All API endpoints are unsecured

Requirements:
- PHP 8+
- HTML/CSS/JS
- No external database
- Must run on a self-hosted Debian server
- Code should be clean, commented, and easy to modify